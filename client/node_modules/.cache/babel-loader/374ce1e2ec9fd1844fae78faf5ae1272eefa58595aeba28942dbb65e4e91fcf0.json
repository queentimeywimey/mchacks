{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{io}from'socket.io-client';import{jsx as _jsx}from\"react/jsx-runtime\";const SocketContext=/*#__PURE__*/createContext(null);export const SocketProvider=_ref=>{let{children}=_ref;const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[isProvider,setIsProvider]=useState(false);const[patients,setPatients]=useState([]);useEffect(()=>{const newSocket=io('http://localhost:3001');newSocket.on('connect',()=>{setIsConnected(true);console.log('Connected to server');});newSocket.on('disconnect',()=>{setIsConnected(false);console.log('Disconnected from server');});newSocket.on('patients-updated',updatedPatients=>{setPatients(updatedPatients);});setSocket(newSocket);return()=>{newSocket.close();};},[]);const authenticateProvider=async password=>{if(!socket)return false;return new Promise(resolve=>{socket.emit('provider-auth',password,response=>{setIsProvider(response.success);resolve(response.success);});});};const addPatient=async(name,symptoms,triageLevel)=>{if(!socket)throw new Error('Not connected');return new Promise(resolve=>{socket.emit('add-patient',{name,symptoms,triageLevel},response=>{if(response.success){resolve(response.patientId);}});});};const updateSymptoms=update=>{if(!socket)return;socket.emit('update-symptoms',update);};const getPatient=async patientId=>{if(!socket)return null;return new Promise(resolve=>{socket.emit('get-patient',patientId,patient=>{resolve(patient);});});};const updateTriageLevel=(patientId,triageLevel)=>{if(!socket)return;socket.emit('update-triage-level',{patientId,triageLevel});};const updateStatus=(patientId,status)=>{if(!socket)return;socket.emit('update-status',{patientId,status});};const updateWaitTimes=input=>{if(!socket)return;socket.emit('update-wait-times',input);};const value={socket,isConnected,isProvider,setIsProvider,authenticateProvider,addPatient,updateSymptoms,updateTriageLevel,updateStatus,getPatient,updateWaitTimes,patients};return/*#__PURE__*/_jsx(SocketContext.Provider,{value:value,children:children});};export const useSocket=()=>{const context=useContext(SocketContext);if(!context){throw new Error('useSocket must be used within a SocketProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsx","_jsx","SocketContext","SocketProvider","_ref","children","socket","setSocket","isConnected","setIsConnected","isProvider","setIsProvider","patients","setPatients","newSocket","on","console","log","updatedPatients","close","authenticateProvider","password","Promise","resolve","emit","response","success","addPatient","name","symptoms","triageLevel","Error","patientId","updateSymptoms","update","getPatient","patient","updateTriageLevel","updateStatus","status","updateWaitTimes","input","value","Provider","useSocket","context"],"sources":["/Users/denalitran-le/Documents/GitHub/mchacks/client/src/contexts/SocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { Patient, PatientUpdate, PatientStatus } from '../types';\n\ninterface SocketContextType {\n    socket: Socket | null;\n    isConnected: boolean;\n    isProvider: boolean;\n    setIsProvider: (value: boolean) => void;\n    authenticateProvider: (password: string) => Promise<boolean>;\n    addPatient: (name: string, symptoms: string[], triageLevel: 1 | 2 | 3 | 4 | 5) => Promise<string>;\n    updateSymptoms: (update: PatientUpdate) => void;\n    updateTriageLevel: (patientId: string, triageLevel: 1 | 2 | 3 | 4 | 5) => void;\n    updateStatus: (patientId: string, status: PatientStatus) => void;\n    getPatient: (patientId: string) => Promise<Patient | null>;\n    updateWaitTimes: (input: string) => void;\n    patients: Patient[];\n}\n\nconst SocketContext = createContext<SocketContextType | null>(null);\n\nexport const SocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n    const [socket, setSocket] = useState<Socket | null>(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const [isProvider, setIsProvider] = useState(false);\n    const [patients, setPatients] = useState<Patient[]>([]);\n\n\n    useEffect(() => {\n        const newSocket = io('http://localhost:3001');\n\n        newSocket.on('connect', () => {\n            setIsConnected(true);\n            console.log('Connected to server');\n        });\n\n        newSocket.on('disconnect', () => {\n            setIsConnected(false);\n            console.log('Disconnected from server');\n        });\n\n        newSocket.on('patients-updated', (updatedPatients: Patient[]) => {\n            setPatients(updatedPatients);\n        });\n\n        setSocket(newSocket);\n\n        return () => {\n            newSocket.close();\n        };\n    }, []);\n\n    const authenticateProvider = async (password: string): Promise<boolean> => {\n        if (!socket) return false;\n        \n        return new Promise((resolve) => {\n            socket.emit('provider-auth', password, (response: { success: boolean }) => {\n                setIsProvider(response.success);\n                resolve(response.success);\n            });\n        });\n    };\n\n    const addPatient = async (\n        name: string,\n        symptoms: string[],\n        triageLevel: 1 | 2 | 3 | 4 | 5\n    ): Promise<string> => {\n        if (!socket) throw new Error('Not connected');\n\n        return new Promise((resolve) => {\n            socket.emit(\n                'add-patient',\n                { name, symptoms, triageLevel },\n                (response: { success: boolean; patientId: string }) => {\n                    if (response.success) {\n                        resolve(response.patientId);\n                    }\n                }\n            );\n        });\n    };\n\n    const updateSymptoms = (update: PatientUpdate) => {\n        if (!socket) return;\n        socket.emit('update-symptoms', update);\n    };\n\n    const getPatient = async (patientId: string): Promise<Patient | null> => {\n        if (!socket) return null;\n\n        return new Promise((resolve) => {\n            socket.emit('get-patient', patientId, (patient: Patient | null) => {\n                resolve(patient);\n            });\n        });\n    };\n\n    const updateTriageLevel = (patientId: string, triageLevel: 1 | 2 | 3 | 4 | 5) => {\n        if (!socket) return;\n        socket.emit('update-triage-level', { patientId, triageLevel });\n    };\n\n    const updateStatus = (patientId: string, status: PatientStatus) => {\n        if (!socket) return;\n        socket.emit('update-status', { patientId, status });\n    };\n\n    const updateWaitTimes = (input: string) => {\n        if (!socket) return;\n        socket.emit('update-wait-times', input);\n    }\n\n    const value = {\n        socket,\n        isConnected,\n        isProvider,\n        setIsProvider,\n        authenticateProvider,\n        addPatient,\n        updateSymptoms,\n        updateTriageLevel,\n        updateStatus,\n        getPatient,\n        updateWaitTimes,\n        patients\n    };\n\n    return (\n        <SocketContext.Provider value={value}>\n            {children}\n        </SocketContext.Provider>\n    );\n};\n\nexport const useSocket = () => {\n    const context = useContext(SocketContext);\n    if (!context) {\n        throw new Error('useSocket must be used within a SocketProvider');\n    }\n    return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}